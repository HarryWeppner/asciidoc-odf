= ODF backend for AsciiDoc
Dag Wieers <dag@wieers.com>

The ODF backend for AsciiDoc enables AsciiDoc users to directly convert
documents from AsciiDoc to Open Document Format v1.2.

AsciiDoc is a lightweight markup language that maps to DocBook semantics
and makes writing (technical) documentation more enjoyable as it removes
styling and formating from the creative process.


== Benefits
The ODF backend provides the following benefits:

 - Visual styling and formatting using LibreOffice
   _(no more need to modify pesky XSLT or XSL-FO)_

 - Saving and re-applying styles during processing
   _(simply modify styles in LibreOffice and save them to reapply)_

 - Converting to various formats supported by LibreOffice
   _(export plugins include PDF, DOC, HTML, ...)_

 - Support for flat ODF (.fodt) files to help with experimenting
   _(flat ODF files are useful for manual styling, debugging or learning ODF)_


== Limitations
The current implementation is not feature complete. We are working on
it and your help in testing and feedback is appreciated.

 - Incomplete implementation lacks eg. TOC support, complex table support, ...

 - Default stylesheet needs improvements

 - Only document (odt) files are currently supported, presentations (odp)
   support would be nice to have

We hope to address each of these limitations in the future, and your help
is appreciated and welcomed.


== Usage
To use this backend, copy the file _odt.conf_ into your AsciiDoc
configuration directory _/etc/asciidoc/_. Then use:

    # asciidoc -b odt document.txt

This will produce the file _document.fodt_ which is a 'flat ODF file', a
single XML file that can be opened using any recent LibreOffice.

[NOTE]
If you want to use the more common 'packaged ODF file' that any LibreOffice
or OpenOffice program can open, read the <<a2x,section about a2x>> below.


=== Embedded Images
Images can be embedded in your ODF document. To do this use the option
+-a data-uri+ on the command line or add the following attribute in your
AsciiDoc file just below the document title:

    :data-uri:

[NOTE]
Embedding SVG images does not work because LibreOffice expects them
encapsulated inside SVM (StarView Metafile) files. SVM is undocumented
and not a standard. We hope LibreOffice drops SVM encapsulation soon.
Most formats however are supported, although ODF recommends PNG and SVG.

When using 'packaged ODF files', images will be added to the ODF file and
not embedded, regardless of the +data-uri+ attribute.


=== Admonition Icon Support
If you use admonitions in your documents, please use the options
+-a icons -a iconsdir=/usr/share/asciidoc/images/icons+ on the
command line or add the following attributes just below the document
title:

    :icons:
    :iconsdir: /usr/share/asciidoc/images/icons


=== Numbered titles
If you like titles to be numbered, please use the option +- numbered+ on
the command line or add the following attribute in your AsciiDoc file just
below the document title:

    :numbered:

[NOTE]
The current implementation adds title numbers always. Since numbering
chapters/section is part of the stylesheet in ODF, it is harder too make
this configurable/optional.


=== Using themes (or custom stylesheets)
The ODF backend can uses themes, which means that it can use alternative
stylesheets. Currently the curiculum-vitae example uses its own (basic)
theme as an example of how this is supposed to work. To select a theme
you can add the option +-a theme=cv+ on the command line or add the
following option in your AsciiDoc file just below the document title:

    :theme: cv

This project also provides <<a2x,an adapted a2x>> to automatically merge
the existing styles from an .odt or .ott file, so that one can save the
modified work from LibreOffice and use the styles from that document
as the input for future documents.

We think this is easier for end-users than extracting the styles
and putting it into themes, but both methods are available.


== Development
You can find the latest version of this AsciiDoc backend at
http://github.com/dagwieers/asciidoc-odf[]

You can help improve the backend by looking for missing/non-working
functionality and implemening/fixing it in the odt.conf file.
Using LibreOffice and saving your tests, and inspecting how LibreOffice
does something helps to understand what is needed for the backend.

If you start off using a flat ODF file, LibreOffice will use flat
ODF files as well, so the turn-around time in debugging/development
is quite fast.

Any issues or feedback can be communicated using the Github web interface.


[[a2x]]
== Packaged ODT from a2x
The directory "packaged" contains a proof of concept a2x which has been
modified to take backend extensions in an a2x.conf file in the backend
directory.  This file goes in the normal backend location, eg
_$HOME/.asciidoc/backends/odt_

The new +--backend+ option specifies a backend plugin name and the
+--backend_opts+ specifies options for it (like +--xslt_opts+ or
+--fop_opts+).

There is a proof of concept _a2x.conf_ that performs creation of packaged ODT
taking styles from ODF templates, which are just normal ODF documents.  This
allows styling to be defined interactively using Libreoffice or Openoffice.

Put the modified a2x in a test directory, don't install over the system a2x
or put it in your path yet.

Usage:

----
./a2x.py -v --backend=odt --backend_opts="--base_doc=your_template.ott" your_file.txt
----

Later versions will have a default template document so the +base_doc+ isn't
required by default.


== Debugging generated ODF
Things can always be improved, if you are stuck with an issues or you just
want to help out with this project, *rejoice* because below you will find
some hints on how to debug and fix your issue !

NOTE: Please contribute any improvements to the styles or ODT definition so
that other people can enjoy your fixes !


=== Missing text/section in LibreOffice
If some text/section is missing in LibreOffice, you can debug the ODF file
by generating a Flat ODF (.fodt) file and opening it with an editor. Look if
the text is part of the file.


=== Fails to open in LibreOffice
If the ODF file fails to open in LibreOffice, you can perform a syntax-check
ofthe generated Flat ODF (.fodt) using the following command:

    # xmllint --format some-file.fodt

If this outputs an error, it means the ODF file does not conform the schema.


=== Styles look incorrect
If the output looks different to what you expected, you can modify the styles
inside LibreOffice, write it out to a Flat ODF file and compare the created
style with the original. You can then change either the _odt.conf_ or the
_asciidoc.odt.styles_ so that the output conforms to your desire.


== Further Reading
Apart from the official specifications, little information is available.

 - http://docs.oasis-open.org/office/v1.0/errata/os/OpenDocument-v1.0-errata-02-os.pdf[Open Document Format for Office Applications (OpenDocument) v1.0]
 - http://docs.oasis-open.org/office/v1.1/OpenDocument-v1.1.pdf[Open Document Format for Office Applications (OpenDocument) v1.1]
 - http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2-part1.pdf[Open Document Format for Office Applications (OpenDocument) v1.2]
 - http://en.wikipedia.org/wiki/OpenDocument_technical_specification[Wikipedia: OpenDocument technical specification]
