= ODF backend for AsciiDoc
:author: Dag Wieers
:email: dag@wieers.com

The ODF backend for AsciiDoc enables AsciiDoc users to directly convert
documents from AsciiDoc to Open Document Format v1.2.

AsciiDoc is a lightweight markup language that maps to DocBook semantics
and makes writing (technical) documentation and presentations more
enjoyable as it removes styling and formatting from the creative process.


== Benefits
The ODF backend provides the following benefits:

 - Visual styling and formatting using LibreOffice +
   _(no more need to modify pesky XSLT or XSL-FO)_

 - Saving and re-applying styles during processing +
   _(simply modify styles in LibreOffice and save them to reapply)_

 - Converting to various formats supported by LibreOffice +
   _(export plugins include PDF, DOC, HTML, ...)_

 - Support for flat ODF (+.fodt+ and +.fodp+) files to help with experimenting +
   _(flat ODF files are useful for manual styling, debugging or learning ODF)_


== Limitations
The current implementation is not feature complete. We are working on
it and your help in testing and feedback is appreciated.

 - Incomplete implementation lacks eg. complex table support, ...

 - Default stylesheet needs improvements

 - Flat ODF files (+.fodt+ and +.fodp+) are supported by LibreOffice 3.3 and newer +
   _(<<a2x,use a2x>> if you need the more common 'packaged' ODF support)_

We hope to address each of these limitations in the future, and your help
and feedback is welcome and appreciated. There is a
https://github.com/dagwieers/asciidoc-odf/issues[list of known issues and requested features].


== Using the ODF backend
=== Usage for text documents
To use this backend for text documents, copy the file _odt.conf_ into your
AsciiDoc configuration directory _/etc/asciidoc/_. Then use:

    # asciidoc -b odt document.txt

This will produce the file _document.fodt_ which is a 'flat ODT file',
a single XML file that can be opened using any recent LibreOffice.


=== Usage for presentations
To use this backend for presentations, copy the file _odp.conf_ into your
AsciiDoc configuration directory _/etc/asciidoc/_. Then use:

    # asciidoc -b odp presentation.txt

This will produce the file _presentation.fodp_ which is a 'flat ODP file',
a single XML file that can be opened using any recent LibreOffice.


== Additional functionality
=== Embedded images
Images can be embedded in your ODF document. To do this use the option
+-a data-uri+ on the command line or add the +data-uri+ attribute to your
AsciiDoc file:

    :data-uri:

[NOTE]
Embedding SVG images does not work because LibreOffice expects them
encapsulated inside SVM (StarView Metafile) files. SVM is undocumented
and not a standard. We hope LibreOffice drops SVM encapsulation soon.
Most formats however are supported, although ODF recommends PNG and SVG.

When using 'packaged ODF files', images will be added to the ODF file and
not embedded, regardless of the +data-uri+ attribute.


=== Admonition icon support
If you use admonitions in your documents, please use the options
+-a icons -a iconsdir=/usr/share/asciidoc/images/icons+ on the
command line or add those attributes in your AsciiDoc file:

    :icons:
    :iconsdir: /usr/share/asciidoc/images/icons


=== Numbered titles
If you like titles to be numbered, please use the option +-a numbered+ on
the command line or add the +numbered+ attribute to your AsciiDoc file:

    :numbered:

[NOTE]
The current implementation adds title numbers always. Since numbering
chapters/sections is part of the stylesheet in ODF, it is complex to make
this configurable.


=== Table-of-Contents support
The ODF backend has Table-of-Contents support if you use the option
+-a toc+ on the command line or add the +toc+ attribute to your AsciiDoc
file:

    :toc:

The TOC depth can be specified using the option +-a toclevels=2+ on the
command line or add the +toclevels+ attribute to your AsciiDoc file:

    :toclevels: 2

[NOTE]
The ODF backend does not stuff the Table of Contents, but only adds the
necessary pieces to the ODF file so that LibreOffice can update it. We also
include an event-handler so that on opening the file the Table-of-Contents
will automatically be updated. This means that on opening the file it will
automatically be flagged as modified.


=== Using themes (or custom stylesheets)
The ODF backend can uses themes, which means that it can use alternative
stylesheets. Currently the curriculum-vitae example uses its own (basic)
theme as an example of how this is supposed to work. To select a theme
you can use the option +-a theme=cv+ on the command line or add the
+theme+ attribute to your AsciiDoc file:

    :theme: cv

This project also provides <<a2x,an adapted a2x>> to automatically merge
the existing styles from an +.odt+ or +.ott+ file, so that one can save the
modified work from LibreOffice and use the styles from that document
as the input for future documents.

We think this is easier for end-users than extracting the styles
and putting it into themes, but both methods are available.


=== Comment support
AsciiDoc has the functionality to make (inline) comments show in the output,
the ODF backend also provides this functionality. When you use the
+-a showcomments+ option on the command line or add the +showcomments+
attribute to your AsciiDoc file, like:

    :showcomments:

the ODF backend will add the comments to the output _marked in yellow_.


=== Annotation support
The ODF backend has support for 'annotation' style listing blocks, these
special blocks will result in proper ODF annotations, including owner
and timestamp if provided.

Adding an annotation block is done using the following syntax:

[listing]
....
[comment,dag,2011-12-03]
---------------------------------------------------------
FIXME: Insert the various features from the Release Notes
       include the information from the presentations
---------------------------------------------------------
....

[NOTE]
====
Annotations are always added to the ODF output but will not be
printed, and might be removed depending on the converted document
format (e.g. to PDF). If you don't want annotations in your
ODF output, use the +hideannotations+ attribute.
====


=== Generating books with covers
If you want to generate a book, use the option +-d book+ or add the
+doctype+ attribute to your AsciiDoc file:

    :doctype: book

The +book+ doctype will create a cover with title, author and date/version
information. Depending on the theme this can be influenced and adapted to
your needs. The Table-of-Contents and Preamble are put on dedicated pages
as well.

The attributes used on the cover page are: +author+, +date+ and +version+

By default if you generate a cover, AsciiDoc will look for the file
+<theme>-cover.png+ in your +<theme>+ theme directory and add it to
the cover. The stylesheet defines the dimensions and where the cover
image is placed.

[TIP]
It is also possible to change the stylesheet to have chapters starting on
new pages, make it start on even pages, have different headers and footers
on odd/even pages and more...


[[a2x]]
== Packaged ODT from a2x
The directory _packaged/_ contains a proof of concept +a2x+ which has been
modified to take backend extensions in an _a2x.conf_ file in the backend
directory. This file goes in the normal backend location, eg
_$HOME/.asciidoc/backends/odt_

The new +--backend+ option specifies a backend plugin name and the
+--backend_opts+ specifies options for it (like +--xslt_opts+ or
+--fop_opts+).

There is a proof of concept _a2x.conf_ that performs creation of packaged ODT
taking styles from ODF templates, which are just normal ODF documents.  This
allows styling to be defined interactively using LibreOffice or OpenOffice.

Put the modified +a2x+ in a test directory, do not install over the system a2x
or put it in your path yet.

Usage:

----
./a2x.py -v --backend=odt --backend_opts="--base_doc=your_template.ott" your_file.txt
----

[NOTE]
Later versions will have a default template document so the +base_doc+ is not
required by default.


== Development
You can find the latest version of this AsciiDoc backend at
http://github.com/dagwieers/asciidoc-odf[]

You can help improve the backend by looking for missing/non-working
functionality and implementing/fixing it in the _odt.conf_ file.
Using LibreOffice and saving your tests, and inspecting how LibreOffice
does something helps to understand what is needed for the backend.

If you start off using a flat ODF file, LibreOffice will use flat
ODF files as well, so the turn-around time in debugging/development
is quite fast.

Any issues or feedback can be communicated using the Github web interface.
A list of known issues and requested features are available from:
https://github.com/dagwieers/asciidoc-odf/issues[]


== Debugging generated ODF
Things can always be improved, if you are stuck with an issue or you just
want to help out with this project, *rejoice* because below you will find
some hints on how to debug and fix your issue !

NOTE: Please contribute any improvements to the styles or ODT definition so
that other people can enjoy your fixes !


=== Missing text/section in LibreOffice
If some text/section is missing in LibreOffice, you can debug the ODF file
by generating a Flat ODF (+.fodt+) file and opening it with an editor. Look if
the text is part of the file.


=== Fails to open in LibreOffice
If the ODF file fails to open in LibreOffice, you can perform a syntax-check
ofthe generated Flat ODF (+.fodt+) using one of the following command:

    # xmllint --noout --relaxng OpenDocument-v1.2-cs01-schema.rng document.fodt
    # jing -i OpenDocument-v1.2-cs01-schema.rng document.fodt

If this outputs an error, it means the ODF file does not conform the schema.

[IMPORTANT]
A bug in xmllint that was recently fixed may cause errors not related to ODF
output. Make sure that your xmllint ships with the following fix:
https://bugzilla.redhat.com/show_bug.cgi?id=752393[Bug 752393 - Unimplemented block at relaxng.c:8948]


=== Styles look incorrect
If the output looks different to what you expected, you can modify the styles
inside LibreOffice, write it out to a Flat ODF file and compare the created
style with the original. You can then change either the _odt.conf_ or the
_asciidoc.odt.styles_ so that the output conforms to your desire.


== Further Reading
Apart from the official specifications, little information is available.

 - http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2-part1.pdf[Open Document Format v1.2 schema]
 - http://en.wikipedia.org/wiki/OpenDocument_technical_specification[Wikipedia: OpenDocument technical specification]
